// Code generated by go-bindata.
// sources:
// webserver/templates/index.html
// webserver/templates/layout.html
// webserver/templates/navbar.html
// webserver/templates/scripts.js
// DO NOT EDIT!

package webserver

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xc1\x4e\xf3\x30\x10\x84\xef\x7e\x8a\xd5\xde\xa3\xa8\xaa\xfe\x9b\xe3\xcb\xff\x08\x1c\x11\x07\xa7\xde\x12\x0b\xc7\x1b\xd6\x9b\x16\x14\xf5\xdd\xd1\x52\x4a\x81\x9b\x35\x9a\xf1\x37\xb3\xdb\x06\x89\x8e\xb9\x12\xe0\x81\xab\x52\x55\x84\xcb\xc5\x39\x3f\xed\xc2\xff\x49\x72\x53\x5e\x26\x12\xdf\x4f\xbb\x60\xea\x3e\x3c\xac\xe3\x9c\x15\x4a\xae\x2f\xcd\xf7\xd3\xde\xe4\x94\x4f\x70\x28\xb1\xb5\x01\x85\xda\x5a\xb4\x3b\x66\x2a\x09\x83\xef\x53\x3e\x99\xe3\xc8\x32\xdf\x2c\x89\xcf\xb5\x70\x4c\x9d\x89\x08\xf1\xa0\x99\xeb\x80\x7d\xfb\xfc\x19\x61\x26\x9d\x38\x0d\xb8\x70\x53\x0c\xce\x01\xfc\x04\x58\xa8\x7b\x16\x5e\x17\x0c\x0e\x00\xc0\x2b\xbd\x69\x14\x8a\x50\xe3\x4c\xf7\xef\x1f\x57\x29\xed\x09\x7f\xe5\x6c\xa3\x70\x81\xef\x0a\xe6\x41\x10\x7a\x5d\xb3\x50\xb2\xfa\xd7\x17\x82\xf0\xb9\x0d\xf8\xcf\x36\xdc\x00\xc6\xbb\x2d\x02\xf0\xe3\xaa\xca\xf5\x2f\xf5\xba\xe2\xce\x1d\xb5\xc2\xa8\xb5\x5b\x24\xcf\x51\xde\xf1\xeb\x80\xbe\xbf\xc6\x83\xf3\xbd\x55\x0b\xce\x6d\x1b\x50\x4d\x76\xfe\x8f\x00\x00\x00\xff\xff\xf4\x3b\x2d\xd5\x96\x01\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 406, mode: os.FileMode(420), modTime: time.Unix(1507414243, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesLayoutHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\x4f\x6f\x9b\x4c\x10\x87\xef\xfe\x14\xfb\xee\xf5\x55\xd8\xc6\x24\xb5\x5b\x01\x52\x6a\x27\xae\xdb\x26\x76\x55\x27\x6e\x7a\x5b\x2f\x83\x59\xbc\x7f\xc8\xee\x18\x83\xac\x7c\xf7\x0a\x88\x92\x36\xaa\xaa\x9e\x60\x7e\xc3\x8c\x34\xcf\x23\x8e\x47\x92\x42\x26\x0d\x10\xaa\x78\x63\xf7\x48\xc9\xe3\xe3\x20\xfa\x6f\xba\x98\xac\xee\x97\x97\x24\x47\xad\x92\x41\xd4\x3e\x88\xe2\x66\x1b\x53\x30\xb4\x0d\x80\xa7\xc9\x80\x90\x48\x03\x72\x22\x72\xee\x3c\x60\x4c\x6f\x57\x57\x27\x63\xda\x35\x50\xa2\x82\x64\x92\x3b\xe9\xd1\x96\x39\xb8\x88\xf5\xd1\xf3\x94\xe1\x1a\x62\x5a\x49\x38\x94\xd6\x21\x25\xc2\x1a\x04\x83\x31\x3d\xc8\x14\xf3\x38\x85\x4a\x0a\x38\xe9\x8a\x7e\xa5\x92\x66\x47\x72\x07\x59\x4c\x73\xc4\xd2\xbf\x67\x4c\xf3\x5a\xa4\x26\xd8\x58\x8b\x1e\x1d\x2f\xdb\x42\x58\xcd\xba\xe0\xc0\x51\xe4\x2c\x0c\xc2\x60\xc4\xfc\xbe\x04\x97\x83\xb3\xec\xf9\xdb\x40\x4b\x13\x08\xef\x29\x71\xa0\x62\xea\xb1\x51\xe0\x73\x00\xa4\x44\x1a\x84\xad\x93\xd8\xc4\xd4\xe7\x3c\x1c\x9f\x9d\x7c\x7f\x10\xcd\x39\xe2\x3e\xdb\x4d\x42\xf7\x81\x8f\x2f\x53\x79\xd1\x5c\x9c\xde\x6d\x17\x33\xa7\x41\x0d\xef\xff\x3f\xd4\xfa\xec\x73\xb8\x9b\x87\x99\x28\x56\x6b\x35\x5d\x3b\x65\xea\x66\xfa\x36\x5f\xc8\x70\x79\x45\x07\x84\x10\x22\x9c\xf5\xde\x3a\xb9\x95\x26\xa6\xdc\x58\xd3\x68\xbb\xf7\x2d\x50\xd6\x13\x8d\x36\x36\x6d\xda\x63\x8f\x47\x12\x08\xef\xb2\x2b\x09\x2a\x6d\x9d\x74\x11\x82\x2e\x15\x47\x20\xd4\xf0\x6a\xc3\x1d\x25\x41\xdf\x8b\x52\x59\x11\xa1\xb8\xf7\x31\x6d\x39\x72\x69\xc0\x75\xd4\x5e\xcd\x3d\x41\x7e\x19\x64\xa9\xac\x92\x41\xfb\xe6\x85\x93\x25\x12\xef\x44\x4c\x19\xe3\x05\xaf\x83\xad\xb5\x5b\x05\xbc\x94\xbe\xa3\xda\x66\x4c\xc9\x8d\x67\xc5\xc3\x1e\x5c\xc3\x4e\x83\xd3\x61\x70\xf6\x54\x75\x3c\x0b\x4f\x93\x88\xf5\xab\x92\xd7\x5b\xff\xc9\x5a\x1b\x3c\x49\x2b\xfc\x2b\x5b\x85\xff\x93\x9b\x95\x38\x9f\x7f\x95\x9b\x37\xc3\xd1\x43\xd5\x14\xdf\xae\xb3\x8f\xc5\xe2\x9a\x7f\xd9\x65\xfb\xf5\x5d\xfd\xa3\xbe\x5d\x9a\xc9\xa7\x8b\x91\x1a\xea\xc9\xfa\x66\x5e\xce\xde\xe9\xd9\x64\x3a\x3e\xcc\x6e\xe6\x62\x39\x1d\xad\x6a\xfe\x77\x37\x2f\xd7\xfc\x72\x0e\x36\x25\xc4\x14\xa1\x46\x56\xf0\x8a\xf7\x29\x4d\x7e\x43\xdd\x87\xbe\x47\xfd\xb2\x25\x62\xbd\xe3\x88\xf5\x3f\xd7\xf1\x48\xc0\x74\x8a\x7f\x06\x00\x00\xff\xff\xa6\xbf\x13\xde\x8d\x03\x00\x00")

func templatesLayoutHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesLayoutHtml,
		"templates/layout.html",
	)
}

func templatesLayoutHtml() (*asset, error) {
	bytes, err := templatesLayoutHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/layout.html", size: 909, mode: os.FileMode(420), modTime: time.Unix(1516542210, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesNavbarHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xce\xc1\x0a\xc3\x20\x0c\x06\xe0\xbb\x4f\x11\x72\x1f\xbe\x80\xf5\xb2\x27\x49\x9b\x88\x42\x49\x47\x74\x5e\xa4\xef\x3e\xb6\x49\x61\x3b\x05\xf2\x25\x3f\xff\x18\xc0\x92\x8a\x0a\xa0\x52\x5f\xc9\x10\xce\xd3\x05\xa5\x0e\xdb\x4e\xb5\x2e\x73\x0d\xdf\x71\x63\x49\xf4\xdc\x1b\x46\x07\x10\xb8\x5c\x57\xdb\xa1\x8d\x8a\x8a\x7d\xe4\xd7\xe6\x6b\x16\xe2\xcb\x01\x02\xfd\xf9\x6a\xa4\x8c\x90\x4d\xd2\x82\x1e\xe3\x3d\x5b\xa9\xed\x78\x64\xb1\xe0\x69\xc6\x7a\x2e\x3d\xba\xe0\x95\x7a\x74\x63\x80\x28\xbf\x0b\xbf\x02\x00\x00\xff\xff\xbc\xa4\x9c\x0b\xc7\x00\x00\x00")

func templatesNavbarHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesNavbarHtml,
		"templates/navbar.html",
	)
}

func templatesNavbarHtml() (*asset, error) {
	bytes, err := templatesNavbarHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/navbar.html", size: 199, mode: os.FileMode(420), modTime: time.Unix(1507414243, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesScriptsJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x94\xc1\x6f\xda\x30\x14\xc6\xef\xf9\x2b\x9e\x10\x92\x13\x15\x8c\x76\x0d\xea\x76\xe8\xd6\xc3\x34\xad\x5b\xa1\xd2\xa4\x69\x07\x2f\x79\x01\xb7\xc6\xce\x9e\x5f\x28\x2c\xca\xff\x3e\xd9\x49\x80\x75\x3d\xec\x12\xc1\x97\x9f\xed\xef\x7d\xfe\xa0\x6d\xa1\xc4\x4a\x5b\x84\x89\x2f\x48\xd7\xec\x27\xd0\x75\xc9\x62\x01\xeb\xad\xf6\xa0\x3d\x28\xf8\xd5\xe8\xe2\x09\x94\x2d\xa1\xd4\xc4\x47\xf0\xcd\xcf\x9d\x66\x46\x92\x49\x5a\x35\xb6\x60\xed\x6c\x3a\xcd\xda\x04\x60\xaf\x08\xa6\xa5\x7b\xb6\xc6\xa9\xf2\xd6\xd1\x0e\xae\x61\x9a\x0a\x39\x4a\xf3\xca\xd1\x4e\x64\xcb\x97\xe8\x03\x19\xff\x12\x6d\xc8\xf8\x0b\x94\xd0\x37\x86\x6f\x35\x9a\x72\x20\x7b\x65\x5e\x05\xe9\x0c\x16\x9e\xaa\xb5\x7b\x42\xdb\x53\xda\xd6\x0d\x7f\xb7\x6a\x87\xd7\x93\x8d\x23\x6d\x8c\x92\x01\x91\x91\x99\xfc\x10\x99\xdc\x2b\x93\x66\xcb\x24\x01\x58\x2c\xa0\x76\x9e\x3f\xae\xee\x3e\x83\x32\xc6\x3d\x7b\x60\x17\x25\x88\x9a\x47\xd2\xca\xe8\xdf\x58\x42\xa9\x58\x85\x97\x0a\x36\x7a\x8f\x16\x1e\xee\x3f\xf5\x1b\x3c\x6f\xb5\x41\xf0\xc8\xac\xed\x06\x78\x8b\x70\xb3\xba\xbf\x85\x2d\xaa\x12\x29\x01\x18\x13\x3b\x9d\x94\x36\x64\x66\x71\xbf\x0c\x42\x86\x00\x84\xdc\x90\x85\xa9\x54\x8f\xea\x90\xf6\x1a\x40\xe1\x2c\xa3\xe5\xf5\xb1\xc6\x1c\x84\xaa\x6b\xa3\x0b\x15\x76\x5a\x3c\x7a\x67\xc5\x6c\xc0\x1a\x32\x79\x78\x8c\xdf\xb9\xe7\xbf\xdc\xad\xd6\x27\xa6\x37\xe3\x73\x68\x41\x7c\x9b\x07\x7f\xf3\x18\x87\xc8\x2f\xe2\xeb\x46\x3a\x58\xcb\x63\x00\xd2\x33\x69\xbb\xd1\xd5\x31\x8d\x7e\x2f\x89\xc1\x57\xf4\x12\xe5\x2e\x5e\x49\x17\x72\x7d\xa5\x02\xd2\xd9\x54\xf4\x4d\x12\xb3\x53\x28\x29\x8e\x19\xa0\xac\x09\xf7\x68\xf9\x3d\x56\xaa\x31\x3c\xdc\x10\x9c\x63\x13\x8b\xd3\xf2\x36\x0c\xec\xf3\xbf\xfb\xd4\xdf\x2b\x74\x99\x2c\x9d\xc5\x73\x53\x09\x7d\xed\xac\x3f\x9d\xd4\xd7\xc6\x68\xfb\xe4\x6f\x5c\x63\x19\xae\x61\x44\x64\x11\x84\xe5\x80\x5d\x56\x50\x2a\x66\x4a\x5b\x10\x85\x51\xde\x8b\x70\x21\x06\x89\x21\x3e\xe7\xbe\x29\x0a\xf4\x5e\x40\x97\x0d\x6b\x01\x24\xe3\x81\xd3\x8b\x63\xae\x40\x80\x80\x2b\xb8\xd4\xde\xc2\x1b\x78\x07\x22\x2a\x02\xf2\xfe\x93\xc8\x22\x5b\x93\x0b\x9b\x62\x29\xfb\xb2\x47\x4b\xff\x0c\x2c\xc6\x97\x5d\x26\x2b\xa5\xcd\x79\xee\xc3\x96\x66\x10\x4c\xac\x58\x71\xe3\xcf\xe3\xff\xff\x5c\xa5\xb2\x1b\xa4\x57\xc6\x12\x1f\x88\x1c\x0d\xdd\x1f\x8c\x86\xfa\xf7\xbf\x8d\x38\x4e\x1e\x87\x3d\x6c\x49\x8e\xe9\xae\xf1\xc0\x27\xb3\xb1\x2b\xd9\x32\xe9\xb2\xf4\xf1\x6b\x83\x74\xcc\x96\x49\xdb\x02\xda\x32\xfc\x1f\xfd\x09\x00\x00\xff\xff\x54\xf6\x51\xe3\xa7\x04\x00\x00")

func templatesScriptsJsBytes() ([]byte, error) {
	return bindataRead(
		_templatesScriptsJs,
		"templates/scripts.js",
	)
}

func templatesScriptsJs() (*asset, error) {
	bytes, err := templatesScriptsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/scripts.js", size: 1191, mode: os.FileMode(420), modTime: time.Unix(1507414243, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.html": templatesIndexHtml,
	"templates/layout.html": templatesLayoutHtml,
	"templates/navbar.html": templatesNavbarHtml,
	"templates/scripts.js": templatesScriptsJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{templatesIndexHtml, map[string]*bintree{}},
		"layout.html": &bintree{templatesLayoutHtml, map[string]*bintree{}},
		"navbar.html": &bintree{templatesNavbarHtml, map[string]*bintree{}},
		"scripts.js": &bintree{templatesScriptsJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

